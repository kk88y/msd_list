revert https://github.com/openwrt/mt76/commit/8f8ed44d026eb2ae325999ddea2af4446db740f9


--- a/mt7915/init.c
+++ b/mt7915/init.c
@@ -42,17 +42,13 @@
 	}
 };
 
-static ssize_t mt7915_thermal_temp_show(struct device *dev,
+static ssize_t mt7915_thermal_show_temp(struct device *dev,
 					struct device_attribute *attr,
 					char *buf)
 {
 	struct mt7915_phy *phy = dev_get_drvdata(dev);
-	int i = to_sensor_dev_attr(attr)->index;
 	int temperature;
 
-	if (i)
-		return sprintf(buf, "%u\n", phy->throttle_temp[i - 1] * 1000);
-
 	temperature = mt7915_mcu_get_temperature(phy);
 	if (temperature < 0)
 		return temperature;
@@ -61,34 +57,11 @@
 	return sprintf(buf, "%u\n", temperature * 1000);
 }
 
-static ssize_t mt7915_thermal_temp_store(struct device *dev,
-					 struct device_attribute *attr,
-					 const char *buf, size_t count)
-{
-	struct mt7915_phy *phy = dev_get_drvdata(dev);
-	int ret, i = to_sensor_dev_attr(attr)->index;
-	long val;
-
-	ret = kstrtol(buf, 10, &val);
-	if (ret < 0)
-		return ret;
-
-	mutex_lock(&phy->dev->mt76.mutex);
-	val = clamp_val(DIV_ROUND_CLOSEST(val, 1000), 60, 130);
-	phy->throttle_temp[i - 1] = val;
-	mutex_unlock(&phy->dev->mt76.mutex);
-
-	return count;
-}
-
-static SENSOR_DEVICE_ATTR_RO(temp1_input, mt7915_thermal_temp, 0);
-static SENSOR_DEVICE_ATTR_RW(temp1_crit, mt7915_thermal_temp, 1);
-static SENSOR_DEVICE_ATTR_RW(temp1_max, mt7915_thermal_temp, 2);
+static SENSOR_DEVICE_ATTR(temp1_input, 0444, mt7915_thermal_show_temp,
+			  NULL, 0);
 
 static struct attribute *mt7915_hwmon_attrs[] = {
 	&sensor_dev_attr_temp1_input.dev_attr.attr,
-	&sensor_dev_attr_temp1_crit.dev_attr.attr,
-	&sensor_dev_attr_temp1_max.dev_attr.attr,
 	NULL,
 };
 ATTRIBUTE_GROUPS(mt7915_hwmon);
@@ -123,9 +96,6 @@
 	if (state > MT7915_THERMAL_THROTTLE_MAX)
 		return -EINVAL;
 
-	if (phy->throttle_temp[0] > phy->throttle_temp[1])
-		return 0;
-
 	if (state == phy->throttle_state)
 		return 0;
 
@@ -180,10 +150,6 @@
 	if (IS_ERR(hwmon))
 		return PTR_ERR(hwmon);
 
-	/* initialize critical/maximum high temperature */
-	phy->throttle_temp[0] = 110;
-	phy->throttle_temp[1] = 120;
-
 	return 0;
 }
 
--- a/mt7915/mcu.c
+++ b/mt7915/mcu.c
@@ -3545,6 +3545,10 @@
 	};
 	int level;
 
+#define TRIGGER_TEMPERATURE	122
+#define RESTORE_TEMPERATURE	116
+#define SUSTAIN_PERIOD		10
+
 	if (!state) {
 		req.ctrl.ctrl_id = THERMAL_PROTECT_DISABLE;
 		goto out;
@@ -3557,7 +3561,7 @@
 		req.ctrl.ctrl_id = THERMAL_PROTECT_DUTY_CONFIG;
 		req.ctrl.duty.duty_level = level;
 		req.ctrl.duty.duty_cycle = state;
-		state /= 2;
+		state = state * 4 / 5;
 
 		ret = mt76_mcu_send_msg(&dev->mt76, MCU_EXT_CMD(THERMAL_PROT),
 					&req, sizeof(req.ctrl), false);
@@ -3565,12 +3569,15 @@
 			return ret;
 	}
 
+	/* currently use fixed values for throttling, and would be better
+	 * to implement thermal zone for dynamic trip in the long run.
+	 */
+
 	/* set high-temperature trigger threshold */
 	req.ctrl.ctrl_id = THERMAL_PROTECT_ENABLE;
-	/* add a safety margin ~10 */
-	req.restore_temp = cpu_to_le32(phy->throttle_temp[0] - 10);
-	req.trigger_temp = cpu_to_le32(phy->throttle_temp[1]);
-	req.sustain_time = cpu_to_le16(10);
+	req.trigger_temp = cpu_to_le32(TRIGGER_TEMPERATURE);
+	req.restore_temp = cpu_to_le32(RESTORE_TEMPERATURE);
+	req.sustain_time = cpu_to_le16(SUSTAIN_PERIOD);
 
 out:
 	req.ctrl.type.protect_type = 1;
--- a/mt7915/mt7915.h
+++ b/mt7915/mt7915.h
@@ -121,7 +121,6 @@
 
 	struct thermal_cooling_device *cdev;
 	u8 throttle_state;
-	u32 throttle_temp[2]; /* 0: critical high, 1: maximum */
 
 	u32 rxfilter;
 	u64 omac_mask;
